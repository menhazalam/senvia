package com.menhaz.senvia.system

import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.provider.Telephony
import android.util.Log
import com.menhaz.senvia.service.ServiceController

class MessageHandler : BroadcastReceiver() {

    companion object {
        private const val TAG = "MessageHandler"
    }

    override fun onReceive(context: Context, intent: Intent) {
        if (intent.action != Telephony.Sms.Intents.SMS_RECEIVED_ACTION) {
            Log.d(TAG, "Received non-SMS intent: ${intent.action}")
            return
        }

        Log.d(TAG, "SMS received, processing...")

        val messages = Telephony.Sms.Intents.getMessagesFromIntent(intent)
        val fullMessage = StringBuilder()
        var sender: String? = null

        for (sms in messages) {
            sender = sms.originatingAddress ?: sender
            fullMessage.append(sms.messageBody)
        }

        if (sender.isNullOrBlank() || fullMessage.isBlank()) {
            Log.w(TAG, "Invalid SMS content - sender: $sender, message: ${fullMessage.isNotBlank()}")
            return
        }

        // ðŸš¨ CRITICAL: Block app-generated messages to prevent infinite loops
        val messageText = fullMessage.toString()
        if (isAppGeneratedMessage(messageText)) {
            Log.i(TAG, "Skipping forwarded message from $sender")
            return // Exit early - don't forward this message
        }

        Log.d(TAG, "Valid SMS from: $sender")

        // Forward SMS to persistent service for processing
        try {
            val serviceIntent = Intent(context, ServiceController::class.java).apply {
                action = ServiceController.ACTION_FORWARD_SMS
                putExtra(ServiceController.EXTRA_SENDER, sender)
                putExtra(ServiceController.EXTRA_MESSAGE, fullMessage.toString())
            }

            // Send to persistent service (will handle all filtering and forwarding logic)
            context.startForegroundService(serviceIntent)

            Log.d(TAG, "SMS forwarding request sent to persistent service")
        } catch (e: Exception) {
            Log.e(TAG, "Failed to forward SMS to service", e)
        }
    }

    /**
     * Check if the message was generated by this app
     */
    private fun isAppGeneratedMessage(message: String): Boolean {
        return message.contains("ðŸ“¨ SMS Forward") ||
               message.contains("ðŸ“± **SMS Forward**") ||
               message.contains("ðŸ“ž From:")
    }
}
